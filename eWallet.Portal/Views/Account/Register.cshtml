@model eWallet.Portal.Models.RegisterViewModel
@{
    ViewBag.Title = "Đăng ký tài khoản";
}
<section id="azpay-breacum">
    <div class="container">
        <div class="row">
            <article class="col-lg-12">
                <a href="/">Trang chủ</a><span><i class="fa fa-angle-right"></i></span><span>@ViewBag.Title</span>
            </article>
        </div>
    </div>
</section> <!--end breacum-->
<div class="row">
    <div id="login-dp" class="col-md-6 col-md-offset-3">
        @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @id = "register-nav", @class = "form", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <h4>Đăng ký tài khoản.</h4>
            <hr />
            @Html.ValidationSummary()
            <div class="form-group">
                @Html.LabelFor(m => m.Email, new { @class = "sr-only" })
                @Html.TextBoxFor(m => m.Email, new { placeholder = "Email đăng nhập", @class = "form-control", onkeypress="validateEmail(email)" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Fullname, new { @class = "sr-only" })

                @Html.TextBoxFor(m => m.Fullname, new { placeholder = "Họ tên của bạn", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Fullname)
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Mobile, new { @class = "sr-only" })

                @Html.TextBoxFor(m => m.Mobile, new { placeholder = "Số điện thoại", @class = "form-control", onkeypress = "return kaka(event, this)" })
                @Html.ValidationMessageFor(m => m.Mobile)
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Password, new { @class = "sr-only" })

                @Html.PasswordFor(m => m.Password, new { placeholder = "Mật khẩu", @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ConfirmPassword, new { @class = "sr-only" })

                @Html.PasswordFor(m => m.ConfirmPassword, new { placeholder = "Xác nhận mật khẩu", @class = "form-control" })
            </div>
            <div class="form-group">
                <input type="submit" onclick="waitingDialog.show('Đang thực hiện đăng ký !', {dialogSize: 'l', progressType: 'warning'});setTimeout(function () {waitingDialog.hide();}, 2000);" class="btn btn-primary btn-block" value="Đăng ký" />
            </div>
            <div class="alert alert-warning" role="alert">Bằng việc chọn Đăng ký đồng nghĩa với việc bạn chấp nhận các <a href="#">Điều khoản sử dụng</a> và <a href="#">Chính sách bảo mật</a> của BigPay</div>
        }
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>

    var waitingDialog = waitingDialog || (function ($) {
        'use strict';

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
                '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
                '<div class="modal-body">' +
                    '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
                '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                if (typeof options === 'undefined') {
                    options = {};
                }
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: '',
                    onHide: null // This callback runs after the dialog was hidden
                }, options);

                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Adding callbacks
                if (typeof settings.onHide === 'function') {
                    $dialog.off('hidden.bs.modal').on('hidden.bs.modal', function (e) {
                        settings.onHide.call($dialog);
                    });
                }
                // Opening dialog
                $dialog.modal();
            },
            /**
             * Closes dialog
             */
            hide: function () {
                $dialog.modal('hide');
            }
        };

    })(jQuery);
</script>


@*kiểm tra kiểu số khi nhập*@
<script language="javascript">
    function kaka(e, kakatexto) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            return false;
        }
    }
    //function validate(evt) {
    //    var theEvent = evt || window.event;
    //    var key = theEvent.keyCode || theEvent.which;
    //    key = String.fromCharCode(key);
    //    var regex = /[0-9]|\./;
    //    if (!regex.test(key)) {
    //        theEvent.returnValue = false;
    //        if (theEvent.preventDefault) theEvent.preventDefault();
    //    }
    //}
</script>

